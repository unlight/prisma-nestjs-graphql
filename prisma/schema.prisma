datasource database {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions", "nativeDistinct", "strictUndefinedChecks"]
}

generator nestgraphql {
  provider                              = "node -r ts-node/register/transpile-only src/index.ts"
  output                                = "../@generated"
  noAtomicOperations                    = false
  combineScalarFilters                  = false
  reExport                              = None
  emitSingle                            = false
  emitCompiled                          = false
  purgeOutput                           = false
  requireSingleFieldsInWhereUniqueInput = false
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  fields_Scalars_from                   = "graphql-scalars"
  fields_Scalars_input                  = true
  useInputType_WhereInput_ALL           = "WhereInput"
  decorate_1_type                       = "Create@(One|Many)UserArgs"
  decorate_1_field                      = data
  decorate_1_name                       = ValidateNested
  decorate_1_from                       = "class-validator"
  decorate_1_arguments                  = "[]"
  decorate_2_type                       = "Create@(One|Many)UserArgs"
  decorate_2_field                      = data
  decorate_2_from                       = "class-transformer"
  decorate_2_arguments                  = "['() => {propertyType.0}']"
  decorate_2_name                       = Type
  decorate_2_namedImport                = true
  decorate_3_type                       = "ProfileUncheckedCreateNestedOneWithoutUserInput"
  decorate_3_field                      = "!(create)"
  decorate_3_name                       = "HideField"
  decorate_3_from                       = "@nestjs/graphql"
  decorate_3_arguments                  = "[]"
}

/// User really
model User {
  id               String    @id @default(cuid())
  /// @FieldType('Scalars.GraphQLEmailAddress')
  email            String    @unique
  /// User's name
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(50)
  name             String    @unique
  /// @HideField()
  password         String
  bio              String?
  image            String?
  following        User[]    @relation("UserFollows")
  followers        User[]    @relation("UserFollows")
  favoriteArticles Article[] @relation(name: "FavoritedArticles")
  articles         Article[] @relation("ArticleAuthor")
  comments         Comment[]
  countComments    Int?
  rating           Float?
  money            Decimal?
  role             Role?
  profile          Profile?

  @@unique([email, name])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  articles Article[]
}

model Article {
  id             String    @id @default(cuid())
  slug           String    @unique
  title          String
  description    String
  body           String
  tags           Tag[]
  /// @HideField({ match: '*Create*Input' })
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoritesCount Int       @default(0)
  author         User      @relation(name: "ArticleAuthor", fields: [authorId], references: [id])
  authorId       String
  favoritedBy    User[]    @relation(name: "FavoritedArticles")
  comments       Comment[]
  active         Boolean?  @default(true)
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  /// @HideField({ match: '*Update*Input' })
  updatedAt DateTime @updatedAt
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
}

/// user access control
enum Role {
  /// default user access control
  USER
  /// have full access control
  NINGA
  /// @deprecated Use USER instead
  ADMIN
  REVIEWER // no comment and won't show in registerenum valuemaps
}

model Profile {
  /// @deprecated Use new name instead
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  dummy  String?
}

model Dummy {
  id       String    @id
  date     DateTime? @default(now())
  int      Int?
  float    Float?
  bytes    Bytes?
  decimal  Decimal // Keep as required (for compatibility check)
  decimals Decimal[]
  bigInt   BigInt?
  json     Json?
  friends  String[]
}
